name: Main

on: [push, pull_request]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "pypy3.9", "pypy3.10", "graalpy-24.0"]
        exclude:
          - os: ubuntu-latest
            python-version: graalpy-24.0
        include:
          - os: ubuntu-latest
            python-version: 3.13
            experimental: true
          - os: macos-latest
            python-version: 3.13
            experimental: true
          - os: windows-latest
            python-version: 3.13
            experimental: true

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Display versions
        run: |
          python -c "import sys; print(sys.version); print(sys.platform); print(sys.prefix)"
          python -c "import os; print(os.name)"
          python -c "import platform; print(platform.system())"
          python -c "import unicodedata; print(unicodedata.unidata_version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flit pytest pytest-cov
          # sudo apt-get update
          # sudo apt-get install -y libxslt1-dev # libxml2-dev
          # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Install module
        run: |
          python -m pip install .
      - name: Test with pytest
        run: |
          pytest

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            python -m pip install build
      - name: Build a binary wheel and a source tarball
        run: |
            python -m build
      - name: Store distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  production:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/thefoxUtils  # optional
    permissions:
      id-token: write  # mandatory for trusted publishing

    steps:
    - name: Retrieve distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
